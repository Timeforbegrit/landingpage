import { NextRequest, NextResponse } from 'next/server'
import { FormData } from '@/lib/types'
import { supabase } from '@/lib/supabase/client'

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
function validateFormData(data: any): { isValid: boolean; errors: string[] } {
  const errors: string[] = []
  
  if (!data.name || data.name.length < 2) {
    errors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞')
  }
  
  if (!data.email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
    errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å')
  }
  
  if (!data.company || data.company.length < 2) {
    errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
  }
  
  if (!data.phone || !/^[\+]?[1-9][\d]{10,14}$/.test(data.phone.replace(/[\s\-\(\)]/g, ''))) {
    errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
  }
  
  return { isValid: errors.length === 0, errors }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
async function sendEmailNotification(formData: FormData) {
  console.log('üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
    to: 'sales@newbusiness.io',
    subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç ${formData.name} (${formData.company})`,
    data: formData
  })
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π email —Å–µ—Ä–≤–∏—Å:
  // - Nodemailer + SMTP
  // - SendGrid
  // - Mailgun
  // - Resend
  
  return true
}

export async function POST(request: NextRequest) {
  try {
    const formData: FormData = await request.json()
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validation = validateFormData(formData)
    if (!validation.isValid) {
      return NextResponse.json({
        success: false,
        errors: validation.errors
      }, { status: 400 })
    }
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Supabase
    const submissionData = {
      name: formData.name,
      email: formData.email,
      company: formData.company,
      position: formData.position || null,
      phone: formData.phone,
      ip_address: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown',
      user_agent: request.headers.get('user-agent') || 'unknown',
      source: 'website'
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase
    const { data: submission, error } = await supabase
      .from('submissions')
      .insert([submissionData])
      .select()
      .single()
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error)
      return NextResponse.json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
      }, { status: 500 })
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await sendEmailNotification(formData)
    
    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return NextResponse.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.',
      submissionId: submission.id
    })
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã:', error)
    return NextResponse.json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 })
  }
}

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
export async function GET() {
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∏–∑ Supabase
    const { data: submissions, error } = await supabase
      .from('submissions')
      .select('*')
      .order('created_at', { ascending: false })
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error)
      return NextResponse.json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
      }, { status: 500 })
    }
    
    return NextResponse.json({
      success: true,
      submissions: submissions || []
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error)
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
    }, { status: 500 })
  }
} 