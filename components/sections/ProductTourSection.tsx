'use client'

import { useState, useEffect } from 'react'
import { MonitorIcon, KanbanSquareIcon, ShieldIcon, FileTextIcon, BarChart3Icon, PlayIcon } from 'lucide-react'
import { Manrope } from 'next/font/google'
import { productSlides } from '@/lib/data/productSlides'

const manrope = Manrope({
  subsets: ['latin', 'cyrillic'],
  display: 'swap',
  weight: ['400', '500', '600', '700'],
})

const slideIcons = [
  MonitorIcon,
  KanbanSquareIcon,
  ShieldIcon,
  FileTextIcon,
  BarChart3Icon
]

const slideColors = [
  'from-blue-500 to-cyan-500',
  'from-purple-500 to-pink-500', 
  'from-green-500 to-emerald-500',
  'from-orange-500 to-red-500',
  'from-indigo-500 to-purple-500'
]

export default function ProductTourSection() {
  const [activeSlide, setActiveSlide] = useState(0)
  const [progress, setProgress] = useState(0)
  const [isAutoPlaying, setIsAutoPlaying] = useState(true)

  useEffect(() => {
    if (!isAutoPlaying) return

    const progressInterval = setInterval(() => {
      setProgress((prev) => {
        if (prev >= 100) {
          setActiveSlide((current) => (current + 1) % productSlides.length)
          return 0
        }
        return prev + 1
      })
    }, 80)

    return () => clearInterval(progressInterval)
  }, [isAutoPlaying, activeSlide])

  const handleSlideChange = (index: number) => {
    setActiveSlide(index)
    setProgress(0)
    setIsAutoPlaying(false)
    setTimeout(() => setIsAutoPlaying(true), 5000)
  }

  return (
    <section id="product" className="py-20 px-6 bg-gradient-to-br from-gray-900 via-slate-900 to-gray-900">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12 scroll-animation">
          <h2 className={`text-4xl md:text-5xl font-bold mb-6 text-white ${manrope.className}`}>
            –¢—É—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É
          </h2>
          <p className="text-xl text-gray-300 max-w-3xl mx-auto">
            –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
          </p>
        </div>

        {/* Tabs Navigation */}
        <div className="mb-8 scroll-animation">
          <div className="flex flex-wrap justify-center gap-2 p-2 bg-gray-800/50 rounded-2xl backdrop-blur-sm border border-gray-700/50">
            {productSlides.map((slide, index) => {
              const IconComponent = slideIcons[index]
              const isActive = index === activeSlide
              const colorClass = slideColors[index]
              
              return (
                <button
                  key={index}
                  className={`relative flex items-center gap-3 px-6 py-4 rounded-xl transition-all duration-300 group ${
                    isActive 
                      ? 'bg-white text-gray-900 shadow-lg transform scale-105' 
                      : 'text-gray-300 hover:text-white hover:bg-gray-700/50'
                  }`}
                  onClick={() => handleSlideChange(index)}
                >
                  {/* Progress bar for active tab */}
                  {isActive && (
                    <div 
                      className={`absolute bottom-0 left-0 h-1 bg-gradient-to-r ${colorClass} rounded-full transition-all duration-100`}
                      style={{ width: `${progress}%` }}
                    />
                  )}
                  
                  <div className={`p-2 rounded-lg transition-all duration-300 ${
                    isActive 
                      ? `bg-gradient-to-r ${colorClass} text-white shadow-md` 
                      : 'bg-gray-600/50 group-hover:bg-gray-500/50'
                  }`}>
                    <IconComponent className="w-5 h-5" />
                  </div>
                  
                  <div className="text-left">
                    <div className={`font-semibold text-sm ${isActive ? 'text-gray-900' : ''}`}>
                      {slide.title}
                    </div>
                    <div className={`text-xs ${isActive ? 'text-gray-600' : 'text-gray-500'}`}>
                      {slide.description}
                    </div>
                  </div>
                </button>
              )
            })}
          </div>
        </div>

        {/* Main Screen Area */}
        <div className="scroll-animation scroll-delay-1">
          <div className="relative bg-gradient-to-br from-gray-800 to-gray-900 rounded-3xl overflow-hidden shadow-2xl border border-gray-700/50">
            {/* Browser-like header */}
            <div className="flex items-center justify-between p-4 bg-gray-800/80 border-b border-gray-700/50">
              <div className="flex items-center gap-3">
                <div className="flex gap-2">
                  <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                  <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                  <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                </div>
                <div className="text-gray-400 text-sm font-mono">
                  risks-platform.com/{productSlides[activeSlide].title.toLowerCase().replace(/\s+/g, '-')}
                </div>
              </div>
              <div className="flex items-center gap-2">
                <div className={`w-2 h-2 rounded-full bg-gradient-to-r ${slideColors[activeSlide]} animate-pulse`}></div>
                <span className="text-gray-400 text-xs">Live Demo</span>
              </div>
            </div>

            {/* Screen Content */}
            <div className="relative aspect-video bg-gradient-to-br from-slate-50 to-gray-100">
              {/* Mock Interface based on active slide */}
              <div className="absolute inset-0 p-8">
                {activeSlide === 0 && <CEODashboardMock />}
                {activeSlide === 1 && <KanbanMock />}
                {activeSlide === 2 && <MitigationMock />}
                {activeSlide === 3 && <ContractsMock />}
                {activeSlide === 4 && <AnalyticsMock />}
              </div>

              {/* Play overlay */}
              <div className="absolute inset-0 bg-black/20 opacity-0 hover:opacity-100 transition-opacity duration-300 flex items-center justify-center group cursor-pointer">
                <div className="bg-white/90 backdrop-blur-sm rounded-full p-6 transform scale-90 group-hover:scale-100 transition-transform duration-300">
                  <PlayIcon className="w-12 h-12 text-gray-900" />
                </div>
              </div>
            </div>

            {/* Bottom info bar */}
            <div className="p-6 bg-gray-800/80 border-t border-gray-700/50">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className={`text-2xl font-bold text-white mb-2 ${manrope.className}`}>
                    {productSlides[activeSlide].title}
                  </h3>
                  <p className="text-gray-300">
                    {productSlides[activeSlide].description}
                  </p>
                </div>
                
                {/* Feature pills */}
                <div className="flex flex-wrap gap-2 max-w-md">
                  {getSlideFeatures(activeSlide).slice(0, 3).map((feature, index) => (
                    <span 
                      key={index}
                      className={`px-3 py-1 text-xs font-medium rounded-full bg-gradient-to-r ${slideColors[activeSlide]} text-white`}
                    >
                      {feature.replace(/[üìäüéØüí∞üìàüéÆüÉèüé®‚ö°‚úÖüõ°Ô∏èüìãüë•ü§ñüìÑüìÅüè∑Ô∏èüì§‚öôÔ∏è]/g, '').trim()}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Slide indicators */}
        <div className="flex justify-center gap-3 mt-8 scroll-animation scroll-delay-2">
          {productSlides.map((_, index) => (
            <button
              key={index}
              className={`relative w-12 h-2 rounded-full transition-all duration-300 ${
                index === activeSlide ? `bg-gradient-to-r ${slideColors[index]}` : 'bg-gray-600 hover:bg-gray-500'
              }`}
              onClick={() => handleSlideChange(index)}
            >
              {index === activeSlide && (
                <div className={`absolute inset-0 bg-gradient-to-r ${slideColors[index]} rounded-full animate-pulse opacity-75`} />
              )}
            </button>
          ))}
        </div>
      </div>
    </section>
  )
}

// Mock interface components
function CEODashboardMock() {
  return (
    <div className="h-full bg-white rounded-lg shadow-sm p-6">
      <div className="grid grid-cols-3 gap-6 h-full">
        <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-4">
          <div className="text-blue-600 text-sm font-medium mb-2">–ò–Ω–¥–µ–∫—Å —Ä–∏—Å–∫–∞</div>
          <div className="text-3xl font-bold text-blue-900">7.2</div>
          <div className="text-xs text-blue-600 mt-1">‚Üó +0.3 –∑–∞ –Ω–µ–¥–µ–ª—é</div>
        </div>
        <div className="bg-gradient-to-br from-red-50 to-red-100 rounded-lg p-4">
          <div className="text-red-600 text-sm font-medium mb-2">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É—â–µ—Ä–±</div>
          <div className="text-3xl font-bold text-red-900">‚ÇΩ2.4–ú</div>
          <div className="text-xs text-red-600 mt-1">‚Üò -15% –∑–∞ –º–µ—Å—è—Ü</div>
        </div>
        <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-4">
          <div className="text-green-600 text-sm font-medium mb-2">–ú–∏—Ç–∏–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</div>
          <div className="text-3xl font-bold text-green-900">23</div>
          <div className="text-xs text-green-600 mt-1">‚Üó +5 –∑–∞ –Ω–µ–¥–µ–ª—é</div>
        </div>
      </div>
    </div>
  )
}

function KanbanMock() {
  return (
    <div className="h-full bg-white rounded-lg shadow-sm p-4">
      <div className="grid grid-cols-3 gap-4 h-full">
        <div className="bg-gray-50 rounded-lg p-3">
          <div className="text-gray-600 text-sm font-medium mb-3">–ù–æ–≤—ã–µ —Ä–∏—Å–∫–∏</div>
          <div className="space-y-2">
            <div className="bg-red-100 border-l-4 border-red-500 p-2 rounded text-xs">
              <div className="font-medium">–ö–∏–±–µ—Ä–∞—Ç–∞–∫–∞</div>
              <div className="text-gray-600">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 85%</div>
            </div>
            <div className="bg-yellow-100 border-l-4 border-yellow-500 p-2 rounded text-xs">
              <div className="font-medium">–°–±–æ–π —Å–∏—Å—Ç–µ–º—ã</div>
              <div className="text-gray-600">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 45%</div>
            </div>
          </div>
        </div>
        <div className="bg-gray-50 rounded-lg p-3">
          <div className="text-gray-600 text-sm font-medium mb-3">–í —Ä–∞–±–æ—Ç–µ</div>
          <div className="space-y-2">
            <div className="bg-blue-100 border-l-4 border-blue-500 p-2 rounded text-xs">
              <div className="font-medium">–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</div>
              <div className="text-gray-600">–ü—Ä–æ–≥—Ä–µ—Å—Å: 60%</div>
            </div>
          </div>
        </div>
        <div className="bg-gray-50 rounded-lg p-3">
          <div className="text-gray-600 text-sm font-medium mb-3">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
          <div className="space-y-2">
            <div className="bg-green-100 border-l-4 border-green-500 p-2 rounded text-xs">
              <div className="font-medium">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û</div>
              <div className="text-gray-600">–ó–∞–≤–µ—Ä—à–µ–Ω–æ: 100%</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

function MitigationMock() {
  return (
    <div className="h-full bg-white rounded-lg shadow-sm p-6">
      <div className="mb-4">
        <div className="text-lg font-semibold text-gray-900 mb-2">–°—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∏—Ç–∏–≥–∞—Ü–∏–∏: –ü—Ä–∏–Ω—è—Ç—å</div>
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <div className="text-sm font-medium text-green-800 mb-2">–ß–µ–∫-–ª–∏—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π:</div>
          <div className="space-y-2 text-sm">
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-green-500 rounded-full flex items-center justify-center">
                <div className="w-2 h-2 bg-white rounded-full"></div>
              </div>
              <span className="text-green-700">–û—Ü–µ–Ω–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-green-500 rounded-full flex items-center justify-center">
                <div className="w-2 h-2 bg-white rounded-full"></div>
              </div>
              <span className="text-green-700">–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 border-2 border-gray-300 rounded-full"></div>
              <span className="text-gray-600">–£–≤–µ–¥–æ–º–∏—Ç—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

function ContractsMock() {
  return (
    <div className="h-full bg-white rounded-lg shadow-sm p-6">
      <div className="mb-4">
        <div className="text-lg font-semibold text-gray-900 mb-4">–ò–ò-–∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞</div>
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
          <div className="text-sm font-medium text-blue-800 mb-2">–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</div>
          <div className="space-y-2 text-sm">
            <div className="bg-white p-2 rounded border-l-4 border-blue-500">
              <span className="font-medium">–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏:</span> –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 30 –¥–Ω–µ–π
            </div>
            <div className="bg-white p-2 rounded border-l-4 border-orange-500">
              <span className="font-medium">–®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É:</span> 0.1% –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            </div>
            <div className="bg-white p-2 rounded border-l-4 border-red-500">
              <span className="font-medium">–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</span> 12 –º–µ—Å—è—Ü–µ–≤
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

function AnalyticsMock() {
  return (
    <div className="h-full bg-white rounded-lg shadow-sm p-6">
      <div className="grid grid-cols-2 gap-6 h-full">
        <div>
          <div className="text-lg font-semibold text-gray-900 mb-4">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º</div>
          <div className="space-y-3">
            <div className="flex items-center justify-between p-2 bg-gray-50 rounded">
              <span className="text-sm">–ò–¢-–æ—Ç–¥–µ–ª</span>
              <div className="flex items-center gap-2">
                <div className="w-16 h-2 bg-gray-200 rounded-full">
                  <div className="w-12 h-2 bg-red-500 rounded-full"></div>
                </div>
                <span className="text-xs text-gray-600">75%</span>
              </div>
            </div>
            <div className="flex items-center justify-between p-2 bg-gray-50 rounded">
              <span className="text-sm">–§–∏–Ω–∞–Ω—Å—ã</span>
              <div className="flex items-center gap-2">
                <div className="w-16 h-2 bg-gray-200 rounded-full">
                  <div className="w-8 h-2 bg-yellow-500 rounded-full"></div>
                </div>
                <span className="text-xs text-gray-600">50%</span>
              </div>
            </div>
            <div className="flex items-center justify-between p-2 bg-gray-50 rounded">
              <span className="text-sm">–û–ø–µ—Ä–∞—Ü–∏–∏</span>
              <div className="flex items-center gap-2">
                <div className="w-16 h-2 bg-gray-200 rounded-full">
                  <div className="w-4 h-2 bg-green-500 rounded-full"></div>
                </div>
                <span className="text-xs text-gray-600">25%</span>
              </div>
            </div>
          </div>
        </div>
        <div>
          <div className="text-lg font-semibold text-gray-900 mb-4">–¢—Ä–µ–Ω–¥—ã</div>
          <div className="h-32 bg-gradient-to-r from-blue-100 to-purple-100 rounded-lg flex items-end justify-center p-4">
            <div className="text-center text-sm text-gray-600">
              üìà –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤<br/>
              <span className="text-xs">–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –Ω–∞ 15%</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

// Helper function to get features for each slide
function getSlideFeatures(slideIndex: number): string[] {
  const features = [
    [
      "üìä –ò–Ω–¥–µ–∫—Å —Ä–∏—Å–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
      "üéØ –ú–∞—Ç—Ä–∏—Ü–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ —Ä–∏—Å–∫–æ–≤", 
      "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—â–µ—Ä–±–∞",
      "üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã"
    ],
    [
      "üéÆ Drag & Drop –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
      "üÉè –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é",
      "üé® –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤", 
      "‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    ],
    [
      "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —á–µ–∫-–ª–∏—Å—Ç—ã",
      "üõ°Ô∏è –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∏—Ç–∏–≥–∞—Ü–∏–∏",
      "üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
      "üë• –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö"
    ],
    [
      "ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
      "üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤", 
      "üìÅ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ DOCX/PDF",
      "üè∑Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è"
    ],
    [
      "üìä –°—Ä–µ–∑—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º –∏ —Å—Ä–æ–∫–∞–º",
      "üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏",
      "üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–æ–≤", 
      "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏"
    ]
  ]
  
  return features[slideIndex] || []
} 